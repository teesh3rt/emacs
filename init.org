
#+TITLE: My Emacs Config
#+AUTHOR: teesh3rt
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el
#+auto_tangle: t

* Table of Contents :toc:
- [[#settings][Settings]]
- [[#installing-elpaca][Installing Elpaca]]
  - [[#elpaca-use-package-support][Elpaca `use-package` support]]
- [[#emacs][Emacs]]
- [[#evil][Evil]]
  - [[#evil-mode][Evil mode]]
  - [[#evil-collection][Evil collection]]
  - [[#evil-anzu][Evil Anzu]]
- [[#anzu][Anzu]]
- [[#whichkey][WhichKey]]
- [[#general][General]]
- [[#ido][Ido]]
  - [[#ido-mode][Ido mode]]
  - [[#smex][Smex]]
- [[#yasnippets][Yasnippets]]
- [[#company][Company]]
- [[#beacon][Beacon]]
- [[#0x0][0x0]]
- [[#smartparens][Smartparens]]
- [[#rainbow-delimiters][Rainbow delimiters]]
- [[#org-things][Org Things]]
  - [[#org][Org]]
  - [[#org-auto-tangle][Org auto tangle]]
  - [[#org-bullets][Org bullets]]
  - [[#org-table-of-contents][Org Table of Contents]]
  - [[#org-contrib][Org Contrib]]
- [[#themes][Themes]]
- [[#doom-modeline][Doom modeline]]
- [[#jumpy][Jumpy]]
- [[#emacs-rocks][Emacs Rocks!]]
  - [[#multiple-cursorsel][multiple-cursors.el]]
  - [[#expand-regionel][expand-region.el]]
- [[#magit][Magit]]
- [[#memes][Memes]]
  - [[#blimpy][Blimpy]]
  - [[#mines][Mines]]
- [[#fonts-and-stuff][Fonts and stuff]]

* Settings

Settings for this config.

#+begin_src emacs-lisp
  (defcustom settings-theme 'doom-gruvbox "The theme to use")
  (defcustom settings-evil t "Whether to use Evil")
  (defcustom settings-memes t "Whether to install the funny stuff")
#+end_src

* Installing Elpaca

The plugin manager that pulls this whole config together.

#+begin_quote
"Chews data, spits packages"

https://github.com/progfolio/elpaca
#+end_quote

#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.7)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				:ref nil :depth 1
				:files (:defaults "elpaca-test.el" (:exclude "extensions"))
				:build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	 (build (expand-file-name "elpaca/" elpaca-builds-directory))
	 (order (cdr elpaca-order))
	 (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
	  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		   ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
						   ,@(when-let ((depth (plist-get order :depth)))
						       (list (format "--depth=%d" depth) "--no-single-branch"))
						   ,(plist-get order :repo) ,repo))))
		   ((zerop (call-process "git" nil buffer t "checkout"
					 (or (plist-get order :ref) "--"))))
		   (emacs (concat invocation-directory invocation-name))
		   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		   ((require 'elpaca))
		   ((elpaca-generate-autoloads "elpaca" repo)))
	      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
	    (error "%s" (with-current-buffer buffer (buffer-string))))
	((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (when (equal system-type 'windows-nt)
    (elpaca-no-symlink-mode))
  (elpaca `(,@elpaca-order))
#+end_src

** Elpaca `use-package` support

#+begin_src emacs-lisp
  (elpaca elpaca-use-package
    (elpaca-use-package-mode))

  (setq elpaca-use-package-by-default t)
#+end_src

* Emacs

Some settings for Emacs that make working with it more smooth.

#+begin_src emacs-lisp
  (setq make-backup-files nil)
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)
#+end_src

* Evil

** Evil mode

Emacs? Vim? Why choose!

#+begin_src emacs-lisp
  (when settings-evil
    (use-package evil
      :preface
      (setq evil-want-keybinding nil)
      :config
      (evil-mode)))
#+end_src

** Evil collection

Make evil work better with other things

#+begin_src emacs-lisp
  (when settings-evil
    (use-package evil-collection
      :after evil
      :config
      (evil-collection-init)))
#+end_src

** Evil Anzu

Make searching better: Evil edition.

#+begin_src emacs-lisp
  (when settings-evil
    (use-package evil-anzu
      :after (evil anzu)))
#+end_src

* Anzu

Make searching better.

#+begin_src emacs-lisp
  (use-package anzu
    :config
    (global-anzu-mode))
#+end_src


* WhichKey

Show what you are really doing when you type.

#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+end_src

* General

#+begin_quote
general.el provides a more convenient method for binding keys in emacs (for both evil and non-evil users).

https://github.com/noctuid/general.el#about
#+end_quote

#+begin_src emacs-lisp
  (use-package general
    :ensure (:wait t)
    :demand t
    :config
    (general-create-definer def :prefix "SPC" :states '(normal visual)))
    (general-create-definer def :prefix "SPC" :states '(normal visual))

    (def
      "f" '(:ignore t :wk "Files")
      "f f" '(find-file :wk "Find file")
      "f d" '(dired :wk "Dired"))
#+end_src

* Ido

** Ido mode

Make picking stuff convenient.

#+begin_src emacs-lisp
  (ido-mode)
#+end_src

** Smex

Ido for =M-x=

#+begin_src emacs-lisp
  (use-package smex
    :bind (("M-x" . smex)))
#+end_src

* Yasnippets

Please give me autocomplete for things not in the code!

#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (yas-global-mode)
    (define-key yas-minor-mode-map (kbd "TAB") yas-maybe-expand))
#+end_src

* Company

Please give me autocomplete!

#+begin_src emacs-lisp
  (use-package company
    :config
    (global-company-mode))
#+end_src

* Beacon

Never lose your cursor again.

#+begin_src emacs-lisp
  (use-package beacon
    :config
    (beacon-mode))
#+end_src


* 0x0

When you're too lazy to upload to GitHub.

#+begin_src emacs-lisp
  (use-package 0x0
    :general
    (def
      "0" '(:ignore t :wk "0x0")
      "0 f" '(0x0-upload-file :wk "Upload file")
      "0 t" '(0x0-upload-text :wk "Upload text")
      "0 k" '(0x0-upload-kill-ring :wk "Upload kill ring")))
#+end_src

* Smartparens

#+begin_quote
"oh shit i forgot a closing parenthesis again"

me, a lot, while writing this config
#+end_quote

#+begin_src emacs-lisp
  (use-package smartparens
    :hook (prog-mode . smartparens-mode))
#+end_src

* Rainbow delimiters

#+begin_quote
"oh shit i cant find the parenthesis i forgot"

me, a lot, while writing this config
#+end_quote

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* Org Things

** Org

The thing that makes this config possible.

#+begin_src emacs-lisp
  (use-package org
    :hook (org-mode . org-indent-mode))
#+end_src

** Org auto tangle

The thing that makes this config more convenient.

#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :after org
    :hook (org-mode . org-auto-tangle-mode))
#+end_src

** Org bullets

The thing that makes this config look pretty.

#+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode))
#+end_src

** Org Table of Contents

The thing that lets you navigate around the config without scrolling for hours.

#+begin_src emacs-lisp
  (use-package toc-org
    :after org
    :hook (org-mode . toc-org-mode))
#+end_src

** Org Contrib

Org: The sequel.

#+begin_src emacs-lisp
  (use-package org-contrib
    :after org)
#+end_src

* Themes

A bunch of themes if you want them

#+begin_src emacs-lisp
  (use-package modus-themes)
  (use-package doom-themes)
  (use-package badger-theme)
  (use-package dracula-theme)
  (use-package gruvbox-theme)

  (add-hook #'elpaca-after-init-hook (lambda () (load-theme settings-theme t)))
#+end_src

* Doom modeline

Make the modeline prettier

#+begin_src emacs-lisp
  (use-package doom-modeline
    :config
    (doom-modeline-mode))
#+end_src

* Jumpy

A plugin I made to jump between files.

#+begin_src emacs-lisp
  (use-package jumpy
    :ensure (jumpy :host github :repo "teesh3rt/jumpy")
    :general
    (def
      "j" '(:ignore t :wk "Jumpy")
      "j r" '(jumpy-reset :wk "Reset")
      "j j" '(jumpy-jump :wk "Jump")
      "j a" '(jumpy-add :wk "Add")
      "j s" '(jumpy-select :wk "Select")))
#+end_src

* Emacs Rocks!

Thank you, [[https://github.com/magnars][Magnars]].

** multiple-cursors.el

#+begin_src emacs-lisp
  (use-package multiple-cursors
    :bind (
     ("C->" . mc/mark-next-like-this)
     ("C-<" . mc/mark-previous-like-this)
     ("C-c C-<" . mc/mark-all-like-this)))
#+end_src

** expand-region.el

#+begin_src emacs-lisp
  (use-package expand-region
    :bind (("M-@" . er/expand-region)))
#+end_src

* Magit

#+begin_quote
"When I see people working with Git on the command line, I almost feel blind!"

Magnar Sveen, aka Magnars
#+end_quote

#+begin_src emacs-lisp
  (use-package transient :after seq)
  (use-package magit
    :after transient
    :general
    (def "g" '(magit :wk "Magit")))
#+end_src

* Memes

The things you REALLY don't need if you want minimalism.

** Blimpy

blimpy blimpy blimpy blimpy blimpy blimpy blimpy blimpy blimpy blimpy 

#+begin_src emacs-lisp
  (when settings-memes
    (if settings-evil
        (use-package blimpy
  	:ensure (blimpy :host github :repo "progfolio/blimpy")
  	:after (evil)
  	:config
  	(add-hook 'blimpy-before-typing-the-word-blimpy-in-emacs-hook
                    (apply-partially #'evil-insert 1)))
        (use-package blimpy
  	:ensure (blimpy :host github :repo "progfolio/blimpy"))))
#+end_src

** Mines

Minesweeper in Emacs!

#+begin_src emacs-lisp
  (when settings-memes
    (use-package mines))
#+end_src

* Fonts and stuff

Do I really need to explain this?

#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  (add-hook #'prog-mode-hook 'display-line-numbers-mode)

  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(menu-bar-mode nil)
   '(tool-bar-mode nil))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(default ((t (:family "JetBrainsMono NF Medium" :foundry "outline" :slant normal :weight medium :height 120 :width normal)))))  
#+end_src
